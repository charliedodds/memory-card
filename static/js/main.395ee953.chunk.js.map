{"version":3,"sources":["components/Header.js","components/Card.js","components/PlayAgain.js","components/WinBox.js","components/LoseBox.js","components/GameBoard.js","components/Instructions.js","components/MemoryCardGame.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","score","highscore","className","Card","name","img","handleClick","onClick","id","src","alt","toUpperCase","slice","PlayAgain","handleResetClick","WinBox","LoseBox","clicked","getChar","arr","Math","floor","random","length","generateRandomCharArray","firstArr","secondArr","array","indexOf","undefined","shuffledArr","i","j","shuffleArr","GameBoard","setScore","setHighscore","useState","allChars","setAllChars","unpicked","setUnpicked","displayChars","setDisplayChars","alreadyClicked","setAlreadyClicked","useEffect","fetch","then","response","json","data","results","map","char","idx","imgURL","catch","err","console","error","resetGame","e","target","closest","some","filter","Instructions","MemoryCardGame","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.395ee953.chunk.js","sourcesContent":["import '../styles/Header.css';\n\nconst Header = ({ score, highscore }) => (\n  <header className='Header'>\n    <h1 className='Header-title'>Memory Card Game</h1>\n    <section className='Header-scores'>\n      <h2 className='Header-score'>Score: {score}</h2>\n      <h2 className='Header-score'>High score: {highscore}</h2>\n    </section>\n  </header>\n);\n\nexport default Header;\n","import '../styles/Card.css';\n\nconst Card = ({ name, img, handleClick }) => {\n  return (\n    <section className='Card' onClick={handleClick} id={name}>\n      <img className='Card-img' src={img} alt={name} />\n      <h2 className='Card-name'>{name[0].toUpperCase() + name.slice(1)}</h2>\n    </section>\n  );\n};\n\nexport default Card;\n","import '../styles/PlayAgain.css';\n\nconst PlayAgain = ({ handleResetClick }) => {\n  return (\n    <button className='PlayAgain' onClick={handleResetClick}>\n      Play again\n    </button>\n  );\n};\n\nexport default PlayAgain;\n","import PlayAgain from './PlayAgain';\n\nimport '../styles/WinBox.css';\n\nconst WinBox = ({ handleResetClick }) => {\n  return (\n    <section className='WinBox'>\n      <h3 className='WinBox-win'>You win!</h3>\n      <PlayAgain handleResetClick={handleResetClick} />\n      <p className='WinBox-para'>Or maybe it's time to go outside...</p>\n    </section>\n  );\n};\n\nexport default WinBox;\n","import PlayAgain from './PlayAgain';\n\nimport '../styles/LoseBox.css';\n\nconst LoseBox = ({ clicked, handleResetClick }) => {\n  return (\n    <section className='LoseBox'>\n      <h3 className='LoseBox-clicked'>\n        You've already picked {clicked[0].toUpperCase() + clicked.slice(1)}!\n      </h3>\n      <PlayAgain handleResetClick={handleResetClick} />\n    </section>\n  );\n};\n\nexport default LoseBox;\n","import React, { useState, useEffect } from 'react';\n\nimport Card from './Card';\nimport WinBox from './WinBox';\nimport LoseBox from './LoseBox';\n\nimport '../styles/GameBoard.css';\n\nconst getChar = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\nconst shuffleArr = (arr) => {\n  let shuffledArr = [...arr];\n  for (let i = shuffledArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // pick random array index and swap values\n    [shuffledArr[i], shuffledArr[j]] = [shuffledArr[j], shuffledArr[i]];\n  }\n  return shuffledArr;\n};\n\nconst generateRandomCharArray = (firstArr, secondArr) => {\n  let array = [getChar(firstArr), getChar(secondArr), getChar(secondArr)];\n  while (\n    array[0] &&\n    array[1] &&\n    array[2] &&\n    (array[0] === array[1] || array[0] === array[2] || array[1] === array[2])\n  ) {\n    array = generateRandomCharArray(firstArr, secondArr);\n  }\n  if (firstArr.indexOf(undefined) < 0 && secondArr.indexOf(undefined) < 0) {\n    array = shuffleArr(array);\n  }\n  return array;\n};\n\nconst GameBoard = ({ score, setScore, highscore, setHighscore }) => {\n  const [allChars, setAllChars] = useState([]);\n  const [unpicked, setUnpicked] = useState([]);\n  const [displayChars, setDisplayChars] = useState([]);\n  const [alreadyClicked, setAlreadyClicked] = useState('');\n\n  useEffect(() => {\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n      .then((response) => response.json())\n      .then((data) =>\n        data.results.map((char, idx) => ({\n          name: char.name,\n          imgURL: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\n            idx + 1\n          }.png`,\n        }))\n      )\n      .then((data) => {\n        setAllChars([...data]);\n        setUnpicked([...data]);\n      })\n      .catch((err) => console.error(err));\n  }, []);\n\n  useEffect(() => {\n    setDisplayChars(generateRandomCharArray(unpicked, allChars));\n  }, [unpicked]);\n\n  const resetGame = () => {\n    if (score > highscore) {\n      setHighscore(score);\n    }\n    setScore(0);\n    setUnpicked([...allChars]);\n  };\n\n  const handleClick = (e) => {\n    const clicked = e.target.closest('section').id;\n    if (unpicked.some((char) => char.name === clicked)) {\n      setScore(score + 1);\n      setUnpicked(unpicked.filter((char) => char.name !== clicked));\n    } else {\n      setAlreadyClicked(clicked);\n      resetGame();\n    }\n  };\n\n  const handleResetClick = () => {\n    resetGame();\n    setAlreadyClicked('');\n  };\n\n  return (\n    <main className='GameBoard'>\n      {alreadyClicked ? (\n        <LoseBox clicked={alreadyClicked} handleResetClick={handleResetClick} />\n      ) : unpicked.length === 0 ? (\n        <WinBox handleResetClick={handleResetClick} />\n      ) : displayChars[0] === undefined ||\n        displayChars[1] === undefined ||\n        displayChars[2] === undefined ? (\n        <p>Loading...</p>\n      ) : (\n        displayChars.map((char) => (\n          <Card\n            key={char.name}\n            img={char.imgURL}\n            name={char.name}\n            handleClick={handleClick}\n          />\n        ))\n      )}\n    </main>\n  );\n};\n\nexport default GameBoard;\n","import '../styles/Instructions.css';\n\nconst Instructions = () => (\n  <footer className='Instructions'>\n    <h2 className='Instructions-title'>How to play</h2>\n    <p className='Instructions-para'>\n      Click a card that you haven't already clicked to score a point.\n    </p>\n    <p className='Instructions-para'>\n      If you click a card you've already clicked - it's game over!\n    </p>\n  </footer>\n);\n\nexport default Instructions;\n","import React, { useState } from 'react';\n\nimport Header from './Header';\nimport GameBoard from './GameBoard';\nimport Instructions from './Instructions';\n\nconst MemoryCardGame = () => {\n  const [score, setScore] = useState(0);\n  const [highscore, setHighscore] = useState(0);\n  return (\n    <>\n      <Header score={score} highscore={highscore} />\n      <GameBoard\n        score={score}\n        setScore={setScore}\n        highscore={highscore}\n        setHighscore={setHighscore}\n      />\n      <Instructions />\n    </>\n  );\n};\n\nexport default MemoryCardGame;\n","import MemoryCardGame from './MemoryCardGame';\n\nimport '../styles/App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <MemoryCardGame />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}